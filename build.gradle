buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
/*
plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
}
*/
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'eclipse'
/*
// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
*/
group = "com.github.glitchfiend.biomesoplenty"
// why set the version twice?
//version = config.mod_version
//version = mod_version
archivesBaseName = "BiomesOPlenty"

// add some stuff to the version
def build_number = (System.getenv().BUILD_NUMBER) ? System.getenv().BUILD_NUMBER : "0"
version = minecraft_version+'-'+mod_version+'.'+build_number
// set this for the version.properties file, or was this broken on purpose?
//config.build_number = (System.getenv().BUILD_NUMBER) ? System.getenv().BUILD_NUMBER : ""

minecraft {
    version = minecraft_version + "-" + forge_version // grab latest forge
    useDepAts = true
    mappings = mappings_version
    //gradle complains if this isn't set when setting up/using IDEA workspace
    runDir = "run"
    //set a full version string with appended build number to be used in mod registration
    //def buildnum = (config.build_number!="") ? '.' + config.build_number : ""
    def buildnum = mod_version+'.'+build_number
    replace '@#MOD_VERSION#@', buildnum
    replace '@#FORGE_VERSION#@', forge_version
    replaceIn 'BiomesOPlenty.java'
}

def commonManifest = {
    attributes 'FMLAT': 'biomesoplenty_at.cfg'
}

jar {
    manifest commonManifest
    classifier = 'universal'
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replaces
        expand ([
            'modid': project.archivesBaseName,
            'mod_version': mod_version,
            'minecraft_version': minecraft_version,
            'build_number': build_number
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

import groovy.io.FileType

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from (sourceSets.main.output) {
        include 'LICENSE.txt'
    }

    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output

    manifest commonManifest
    classifier = 'deobf'
}

task apiJar(type: Jar) {
    from(sourceSets.main.allJava) {
        include 'biomesoplenty/api/**'
    }
    from (sourceSets.main.output) {
        include 'LICENSE.txt'
        include 'biomesoplenty/api/**'
    }

    classifier = 'api'
}
/*
task listOutputs << {
    //This is needed by the Groovy Postbuild to append labels for each build used in the changelog.
    println "Output files:"
    println "--------------------"
    def list = []

    def dir = new File("build/libs/")
    
    if (dir.exists()) {
        dir.eachFileRecurse (FileType.FILES) { file ->
            //Add each file to the list
            list << file
        }
    
        //Print the names of all of the output files
        list.each {
            println it.getName()
        }
    }
    println "--------------------"
}

tasks.build.finalizedBy('listOutputs')
*/
artifacts {
    archives sourcesJar
    archives deobfJar
    archives apiJar
}
